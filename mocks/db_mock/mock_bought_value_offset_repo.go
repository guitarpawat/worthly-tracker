//go:build test || unit || integration

// Code generated by mockery v2.32.3. DO NOT EDIT.

package db_mock

import (
	model "worthly-tracker/model"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// MockBoughtValueOffsetRepo is an autogenerated mock type for the BoughtValueOffsetRepo type
type MockBoughtValueOffsetRepo struct {
	mock.Mock
}

type MockBoughtValueOffsetRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoughtValueOffsetRepo) EXPECT() *MockBoughtValueOffsetRepo_Expecter {
	return &MockBoughtValueOffsetRepo_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id, tx
func (_m *MockBoughtValueOffsetRepo) Delete(id int, tx *sqlx.Tx) error {
	ret := _m.Called(id, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *sqlx.Tx) error); ok {
		r0 = rf(id, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoughtValueOffsetRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBoughtValueOffsetRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
//   - tx *sqlx.Tx
func (_e *MockBoughtValueOffsetRepo_Expecter) Delete(id interface{}, tx interface{}) *MockBoughtValueOffsetRepo_Delete_Call {
	return &MockBoughtValueOffsetRepo_Delete_Call{Call: _e.mock.On("Delete", id, tx)}
}

func (_c *MockBoughtValueOffsetRepo_Delete_Call) Run(run func(id int, tx *sqlx.Tx)) *MockBoughtValueOffsetRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Delete_Call) Return(_a0 error) *MockBoughtValueOffsetRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Delete_Call) RunAndReturn(run func(int, *sqlx.Tx) error) *MockBoughtValueOffsetRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: date, assetId, tx
func (_m *MockBoughtValueOffsetRepo) Get(date model.Date, assetId int, tx *sqlx.Tx) (model.OffsetDetail, error) {
	ret := _m.Called(date, assetId, tx)

	var r0 model.OffsetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Date, int, *sqlx.Tx) (model.OffsetDetail, error)); ok {
		return rf(date, assetId, tx)
	}
	if rf, ok := ret.Get(0).(func(model.Date, int, *sqlx.Tx) model.OffsetDetail); ok {
		r0 = rf(date, assetId, tx)
	} else {
		r0 = ret.Get(0).(model.OffsetDetail)
	}

	if rf, ok := ret.Get(1).(func(model.Date, int, *sqlx.Tx) error); ok {
		r1 = rf(date, assetId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoughtValueOffsetRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoughtValueOffsetRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - date model.Date
//   - assetId int
//   - tx *sqlx.Tx
func (_e *MockBoughtValueOffsetRepo_Expecter) Get(date interface{}, assetId interface{}, tx interface{}) *MockBoughtValueOffsetRepo_Get_Call {
	return &MockBoughtValueOffsetRepo_Get_Call{Call: _e.mock.On("Get", date, assetId, tx)}
}

func (_c *MockBoughtValueOffsetRepo_Get_Call) Run(run func(date model.Date, assetId int, tx *sqlx.Tx)) *MockBoughtValueOffsetRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Date), args[1].(int), args[2].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Get_Call) Return(_a0 model.OffsetDetail, _a1 error) *MockBoughtValueOffsetRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Get_Call) RunAndReturn(run func(model.Date, int, *sqlx.Tx) (model.OffsetDetail, error)) *MockBoughtValueOffsetRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByAssetId provides a mock function with given fields: assetId, tx
func (_m *MockBoughtValueOffsetRepo) GetAllByAssetId(assetId int, tx *sqlx.Tx) ([]model.OffsetDetail, error) {
	ret := _m.Called(assetId, tx)

	var r0 []model.OffsetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *sqlx.Tx) ([]model.OffsetDetail, error)); ok {
		return rf(assetId, tx)
	}
	if rf, ok := ret.Get(0).(func(int, *sqlx.Tx) []model.OffsetDetail); ok {
		r0 = rf(assetId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OffsetDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *sqlx.Tx) error); ok {
		r1 = rf(assetId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoughtValueOffsetRepo_GetAllByAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByAssetId'
type MockBoughtValueOffsetRepo_GetAllByAssetId_Call struct {
	*mock.Call
}

// GetAllByAssetId is a helper method to define mock.On call
//   - assetId int
//   - tx *sqlx.Tx
func (_e *MockBoughtValueOffsetRepo_Expecter) GetAllByAssetId(assetId interface{}, tx interface{}) *MockBoughtValueOffsetRepo_GetAllByAssetId_Call {
	return &MockBoughtValueOffsetRepo_GetAllByAssetId_Call{Call: _e.mock.On("GetAllByAssetId", assetId, tx)}
}

func (_c *MockBoughtValueOffsetRepo_GetAllByAssetId_Call) Run(run func(assetId int, tx *sqlx.Tx)) *MockBoughtValueOffsetRepo_GetAllByAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockBoughtValueOffsetRepo_GetAllByAssetId_Call) Return(_a0 []model.OffsetDetail, _a1 error) *MockBoughtValueOffsetRepo_GetAllByAssetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoughtValueOffsetRepo_GetAllByAssetId_Call) RunAndReturn(run func(int, *sqlx.Tx) ([]model.OffsetDetail, error)) *MockBoughtValueOffsetRepo_GetAllByAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByDate provides a mock function with given fields: date, tx
func (_m *MockBoughtValueOffsetRepo) GetAllByDate(date model.Date, tx *sqlx.Tx) ([]model.OffsetDetail, error) {
	ret := _m.Called(date, tx)

	var r0 []model.OffsetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Date, *sqlx.Tx) ([]model.OffsetDetail, error)); ok {
		return rf(date, tx)
	}
	if rf, ok := ret.Get(0).(func(model.Date, *sqlx.Tx) []model.OffsetDetail); ok {
		r0 = rf(date, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OffsetDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Date, *sqlx.Tx) error); ok {
		r1 = rf(date, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoughtValueOffsetRepo_GetAllByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByDate'
type MockBoughtValueOffsetRepo_GetAllByDate_Call struct {
	*mock.Call
}

// GetAllByDate is a helper method to define mock.On call
//   - date model.Date
//   - tx *sqlx.Tx
func (_e *MockBoughtValueOffsetRepo_Expecter) GetAllByDate(date interface{}, tx interface{}) *MockBoughtValueOffsetRepo_GetAllByDate_Call {
	return &MockBoughtValueOffsetRepo_GetAllByDate_Call{Call: _e.mock.On("GetAllByDate", date, tx)}
}

func (_c *MockBoughtValueOffsetRepo_GetAllByDate_Call) Run(run func(date model.Date, tx *sqlx.Tx)) *MockBoughtValueOffsetRepo_GetAllByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Date), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockBoughtValueOffsetRepo_GetAllByDate_Call) Return(_a0 []model.OffsetDetail, _a1 error) *MockBoughtValueOffsetRepo_GetAllByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoughtValueOffsetRepo_GetAllByDate_Call) RunAndReturn(run func(model.Date, *sqlx.Tx) ([]model.OffsetDetail, error)) *MockBoughtValueOffsetRepo_GetAllByDate_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: data, tx
func (_m *MockBoughtValueOffsetRepo) Upsert(data model.OffsetDetail, tx *sqlx.Tx) error {
	ret := _m.Called(data, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.OffsetDetail, *sqlx.Tx) error); ok {
		r0 = rf(data, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoughtValueOffsetRepo_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockBoughtValueOffsetRepo_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - data model.OffsetDetail
//   - tx *sqlx.Tx
func (_e *MockBoughtValueOffsetRepo_Expecter) Upsert(data interface{}, tx interface{}) *MockBoughtValueOffsetRepo_Upsert_Call {
	return &MockBoughtValueOffsetRepo_Upsert_Call{Call: _e.mock.On("Upsert", data, tx)}
}

func (_c *MockBoughtValueOffsetRepo_Upsert_Call) Run(run func(data model.OffsetDetail, tx *sqlx.Tx)) *MockBoughtValueOffsetRepo_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.OffsetDetail), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Upsert_Call) Return(_a0 error) *MockBoughtValueOffsetRepo_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoughtValueOffsetRepo_Upsert_Call) RunAndReturn(run func(model.OffsetDetail, *sqlx.Tx) error) *MockBoughtValueOffsetRepo_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBoughtValueOffsetRepo creates a new instance of MockBoughtValueOffsetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoughtValueOffsetRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoughtValueOffsetRepo {
	mock := &MockBoughtValueOffsetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
