//go:build test || unit || integration

// Code generated by mockery v2.32.3. DO NOT EDIT.

package db_mock

import (
	model "worthly-tracker/model"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// MockAssetRepo is an autogenerated mock type for the AssetRepo type
type MockAssetRepo struct {
	mock.Mock
}

type MockAssetRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetRepo) EXPECT() *MockAssetRepo_Expecter {
	return &MockAssetRepo_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id, tx
func (_m *MockAssetRepo) Delete(id int, tx *sqlx.Tx) error {
	ret := _m.Called(id, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *sqlx.Tx) error); ok {
		r0 = rf(id, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAssetRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
//   - tx *sqlx.Tx
func (_e *MockAssetRepo_Expecter) Delete(id interface{}, tx interface{}) *MockAssetRepo_Delete_Call {
	return &MockAssetRepo_Delete_Call{Call: _e.mock.On("Delete", id, tx)}
}

func (_c *MockAssetRepo_Delete_Call) Run(run func(id int, tx *sqlx.Tx)) *MockAssetRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockAssetRepo_Delete_Call) Return(_a0 error) *MockAssetRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetRepo_Delete_Call) RunAndReturn(run func(int, *sqlx.Tx) error) *MockAssetRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: isActive, typeId, tx
func (_m *MockAssetRepo) Get(isActive *bool, typeId *int, tx *sqlx.Tx) ([]model.AssetDetail, error) {
	ret := _m.Called(isActive, typeId, tx)

	var r0 []model.AssetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*bool, *int, *sqlx.Tx) ([]model.AssetDetail, error)); ok {
		return rf(isActive, typeId, tx)
	}
	if rf, ok := ret.Get(0).(func(*bool, *int, *sqlx.Tx) []model.AssetDetail); ok {
		r0 = rf(isActive, typeId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AssetDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*bool, *int, *sqlx.Tx) error); ok {
		r1 = rf(isActive, typeId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAssetRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - isActive *bool
//   - typeId *int
//   - tx *sqlx.Tx
func (_e *MockAssetRepo_Expecter) Get(isActive interface{}, typeId interface{}, tx interface{}) *MockAssetRepo_Get_Call {
	return &MockAssetRepo_Get_Call{Call: _e.mock.On("Get", isActive, typeId, tx)}
}

func (_c *MockAssetRepo_Get_Call) Run(run func(isActive *bool, typeId *int, tx *sqlx.Tx)) *MockAssetRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bool), args[1].(*int), args[2].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockAssetRepo_Get_Call) Return(_a0 []model.AssetDetail, _a1 error) *MockAssetRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepo_Get_Call) RunAndReturn(run func(*bool, *int, *sqlx.Tx) ([]model.AssetDetail, error)) *MockAssetRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetNames provides a mock function with given fields: isActive, typeId, tx
func (_m *MockAssetRepo) GetNames(isActive *bool, typeId *int, tx *sqlx.Tx) ([]model.NameDetail, error) {
	ret := _m.Called(isActive, typeId, tx)

	var r0 []model.NameDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*bool, *int, *sqlx.Tx) ([]model.NameDetail, error)); ok {
		return rf(isActive, typeId, tx)
	}
	if rf, ok := ret.Get(0).(func(*bool, *int, *sqlx.Tx) []model.NameDetail); ok {
		r0 = rf(isActive, typeId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.NameDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*bool, *int, *sqlx.Tx) error); ok {
		r1 = rf(isActive, typeId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssetRepo_GetNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNames'
type MockAssetRepo_GetNames_Call struct {
	*mock.Call
}

// GetNames is a helper method to define mock.On call
//   - isActive *bool
//   - typeId *int
//   - tx *sqlx.Tx
func (_e *MockAssetRepo_Expecter) GetNames(isActive interface{}, typeId interface{}, tx interface{}) *MockAssetRepo_GetNames_Call {
	return &MockAssetRepo_GetNames_Call{Call: _e.mock.On("GetNames", isActive, typeId, tx)}
}

func (_c *MockAssetRepo_GetNames_Call) Run(run func(isActive *bool, typeId *int, tx *sqlx.Tx)) *MockAssetRepo_GetNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bool), args[1].(*int), args[2].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockAssetRepo_GetNames_Call) Return(_a0 []model.NameDetail, _a1 error) *MockAssetRepo_GetNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssetRepo_GetNames_Call) RunAndReturn(run func(*bool, *int, *sqlx.Tx) ([]model.NameDetail, error)) *MockAssetRepo_GetNames_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSequence provides a mock function with given fields: sequence, tx
func (_m *MockAssetRepo) UpdateSequence(sequence model.SequenceDetail, tx *sqlx.Tx) error {
	ret := _m.Called(sequence, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SequenceDetail, *sqlx.Tx) error); ok {
		r0 = rf(sequence, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetRepo_UpdateSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSequence'
type MockAssetRepo_UpdateSequence_Call struct {
	*mock.Call
}

// UpdateSequence is a helper method to define mock.On call
//   - sequence model.SequenceDetail
//   - tx *sqlx.Tx
func (_e *MockAssetRepo_Expecter) UpdateSequence(sequence interface{}, tx interface{}) *MockAssetRepo_UpdateSequence_Call {
	return &MockAssetRepo_UpdateSequence_Call{Call: _e.mock.On("UpdateSequence", sequence, tx)}
}

func (_c *MockAssetRepo_UpdateSequence_Call) Run(run func(sequence model.SequenceDetail, tx *sqlx.Tx)) *MockAssetRepo_UpdateSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.SequenceDetail), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockAssetRepo_UpdateSequence_Call) Return(_a0 error) *MockAssetRepo_UpdateSequence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetRepo_UpdateSequence_Call) RunAndReturn(run func(model.SequenceDetail, *sqlx.Tx) error) *MockAssetRepo_UpdateSequence_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: asset, tx
func (_m *MockAssetRepo) Upsert(asset model.AssetDetail, tx *sqlx.Tx) error {
	ret := _m.Called(asset, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AssetDetail, *sqlx.Tx) error); ok {
		r0 = rf(asset, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetRepo_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockAssetRepo_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - asset model.AssetDetail
//   - tx *sqlx.Tx
func (_e *MockAssetRepo_Expecter) Upsert(asset interface{}, tx interface{}) *MockAssetRepo_Upsert_Call {
	return &MockAssetRepo_Upsert_Call{Call: _e.mock.On("Upsert", asset, tx)}
}

func (_c *MockAssetRepo_Upsert_Call) Run(run func(asset model.AssetDetail, tx *sqlx.Tx)) *MockAssetRepo_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.AssetDetail), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *MockAssetRepo_Upsert_Call) Return(_a0 error) *MockAssetRepo_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetRepo_Upsert_Call) RunAndReturn(run func(model.AssetDetail, *sqlx.Tx) error) *MockAssetRepo_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssetRepo creates a new instance of MockAssetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetRepo {
	mock := &MockAssetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
