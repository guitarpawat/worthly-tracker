//go:build test || unit || integration

// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/go-sqlx/sqlx"
)

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields:
func (_m *MockConnection) BeginTx() (*sqlx.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnection_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockConnection_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
func (_e *MockConnection_Expecter) BeginTx() *MockConnection_BeginTx_Call {
	return &MockConnection_BeginTx_Call{Call: _e.mock.On("BeginTx")}
}

func (_c *MockConnection_BeginTx_Call) Run(run func()) *MockConnection_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_BeginTx_Call) Return(_a0 *sqlx.Tx, _a1 error) *MockConnection_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnection_BeginTx_Call) RunAndReturn(run func() (*sqlx.Tx, error)) *MockConnection_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *MockConnection) GetDB() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// MockConnection_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockConnection_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *MockConnection_Expecter) GetDB() *MockConnection_GetDB_Call {
	return &MockConnection_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *MockConnection_GetDB_Call) Run(run func()) *MockConnection_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_GetDB_Call) Return(_a0 *sqlx.DB) *MockConnection_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnection_GetDB_Call) RunAndReturn(run func() *sqlx.DB) *MockConnection_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
