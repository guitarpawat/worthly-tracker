// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Pawat Nakpiphatkul",
            "url": "https://github.com/guitarpawat/worthly-tracker/issues"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/records/": {
            "get": {
                "description": "Get records by specified date or latest available if no date supplied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "Get records by date",
                "responses": {
                    "200": {
                        "description": "Success to retrieve records",
                        "schema": {
                            "$ref": "#/definitions/router.getRecordByDateResponse"
                        }
                    },
                    "400": {
                        "description": "Input validation failed"
                    },
                    "404": {
                        "description": "No any records found"
                    },
                    "500": {
                        "description": "Generic server error"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "Add or edit record of specified date",
                "parameters": [
                    {
                        "description": "Records to be added or modified",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.postRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to create/edit records"
                    },
                    "400": {
                        "description": "Input validation failed"
                    },
                    "500": {
                        "description": "Generic server error"
                    }
                }
            }
        },
        "/api/records/draft": {
            "get": {
                "description": "Get new draft by filter only active assets and assetTypes.\nThen prefill the data from the latest records, null if there is no data from the latest record",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "Get record draft for making a new record date",
                "responses": {
                    "200": {
                        "description": "Get draft successfully",
                        "schema": {
                            "$ref": "#/definitions/model.AssetTypeRecord"
                        }
                    },
                    "500": {
                        "description": "Generic server error"
                    }
                }
            }
        },
        "/api/records/offset/{date}": {
            "get": {
                "description": "Get asset offset prices for every asset in the record.\nFor every asset, get only the latest record before or on the specified date",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "Get offset price for specified date",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "Specified date for query in YYYY-MM-DD format",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to retrieve records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.OffsetDetail"
                            }
                        }
                    },
                    "400": {
                        "description": "Input validation failed"
                    },
                    "500": {
                        "description": "Generic server error"
                    }
                }
            }
        },
        "/api/records/{date}": {
            "get": {
                "description": "Get records by specified date or latest available if no date supplied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "Get records by date",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "default": "",
                        "description": "Specified date for query in YYYY-MM-DD format",
                        "name": "date",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success to retrieve records",
                        "schema": {
                            "$ref": "#/definitions/router.getRecordByDateResponse"
                        }
                    },
                    "400": {
                        "description": "Input validation failed"
                    },
                    "404": {
                        "description": "No any records found"
                    },
                    "500": {
                        "description": "Generic server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AssetRecord": {
            "type": "object",
            "properties": {
                "assetId": {
                    "type": "integer",
                    "example": 1
                },
                "boughtValue": {
                    "type": "string",
                    "example": "100.00"
                },
                "broker": {
                    "type": "string",
                    "example": "SCBAM"
                },
                "currentValue": {
                    "type": "string",
                    "example": "101.50"
                },
                "defaultIncrement": {
                    "type": "string",
                    "example": "0.00"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "BTP"
                },
                "note": {
                    "type": "string",
                    "example": "Something worth mention"
                },
                "realizedValue": {
                    "type": "string",
                    "example": "0.00"
                }
            }
        },
        "model.AssetTypeRecord": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AssetRecord"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "isCash": {
                    "type": "boolean",
                    "example": false
                },
                "isLiability": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Mutual Funds"
                }
            }
        },
        "model.DateList": {
            "type": "object",
            "properties": {
                "current": {
                    "description": "Selected date",
                    "type": "string",
                    "format": "date"
                },
                "next": {
                    "description": "Next 12 days from selected date",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "prev": {
                    "description": "Prev 12 days from selected date",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date"
                    }
                }
            }
        },
        "model.OffsetDetail": {
            "type": "object",
            "properties": {
                "assetId": {
                    "type": "integer",
                    "example": 1
                },
                "effectiveDate": {
                    "type": "string",
                    "format": "date"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "note": {
                    "type": "string",
                    "example": "Something worth mention"
                },
                "offsetPrice": {
                    "type": "string",
                    "example": "-500.00"
                }
            }
        },
        "router.getRecordByDateResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Date provides requested date, and 12 record date to and from requested date",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DateList"
                        }
                    ]
                },
                "types": {
                    "description": "Types contains asset records group by asset types",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AssetTypeRecord"
                    }
                }
            }
        },
        "router.postRecordRequest": {
            "type": "object",
            "properties": {
                "assets": {
                    "description": "Assets contains information about records to be added or edited\nIgnore fields: name, isCash, isLiability, assets[].name, assets[].broker, assets[].category, assets[].defaultIncrement\nUse assets[].id (update) or assets[].assetId (insert) for reference\nUpdate fields: assets[].assetId, assets[].boughtValue, assets[].currentValue, assets[].realizedValue, assets[].note",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AssetRecord"
                    }
                },
                "date": {
                    "description": "Date to be added or edited",
                    "type": "string",
                    "format": "date"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{"http"},
	Title:            "Worthly Tracker",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
