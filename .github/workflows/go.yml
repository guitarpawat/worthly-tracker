# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Test

on:
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download Dependencies
      run: go mod download

    - name: Test
      run: go test -v ./... -tags test

    - name: Report Success
      if: ${{ success() }}
      # set the merge commit status check
      # using GitHub REST API
      # see https://docs.github.com/en/rest/reference/repos#create-a-commit-status
      run: |
        curl --request POST \
        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' \
        --data '{
        "context": "Go Test",
        "state": "success",
        "description": "Go tests passed",
        "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }'

    - name: Report Failure
      if: ${{ failure() }}
      # set the merge commit status check
      # using GitHub REST API
      # see https://docs.github.com/en/rest/reference/repos#create-a-commit-status
      run: |
        curl --request POST \
        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' \
        --data '{
          "context": "Go Test",
          "state": "failure",
          "description": "Go tests failed",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }'